generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserProfileLevel  {
  FIRST   //  just opened , cannot add business 
  SECOND // added profile 
}

enum PackageType {
   MONTHLY
   SIX_MONTHLY
   YEARLY
}

enum BusinessProfileLevel {
   FIRST 
   
}

model User {
   id                  String       @id @default(uuid())
   firstName           String
   lastName            String
   email               String       @unique
   profileLevel        UserProfileLevel    @default(FIRST)
   password            String
   profile             Profile?
   reviews             Review[]
   ratings             Rating[]
   bills               Bill[]
   businesses          Business[]    @relation("UserOwnsBusiness")
   followedBussiness   Business[]    @relation("UserFollowsBusiness")


   createdAt           DateTime     @default(now())
   passwordUpdatedAt   DateTime     @default(now())
}

model Profile {
   id                  String       @id @default(uuid())
   phoneNumber         String
   age                 Int
   sex                 String
   profilePicture      String?
   userId              String       @unique
   user                User         @relation(fields: [userId], references: [id])

   createdAt           DateTime     @default(now())
   updatedAt           DateTime     @default(now())
}

model Category {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(255)
  parentId    String?  
  level       Int
  price       Float
  image       String

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  parent      Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  business    Business[]
}

model Business {
   id                  String       @id @default(uuid())
   userId              String
   categoryId          String
   name                String
   description         String
   templateId          String
   owner               User         @relation("UserOwnsBusiness", fields: [userId], references: [id])  // New relation
   
   services            BussinesService[]
   address             BusinessAddress[]
   businessContact     BusinessContact?
   
   followers           User[]       @relation("UserFollowsBusiness")
   visibility          String
   category            Category @relation(fields: [categoryId], references: [id])
   packages            Package[]
   reviews             Review[]
   ratings             Rating[]
   bills               Bill[]
   stories             Story[]

   createdAt           DateTime     @default(now())
   updatedAt           DateTime     @default(now())
}

model BussinesService {
  id                String    @id @default(uuid())
  businessId        String
  name              String
  description       String?
  image             String?  // URL or path to the image
  specifications    Json    // JSON field for storing specifications

  business          Business  @relation(fields: [businessId], references: [id])

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model BusinessAddress {
  id                String    @id @default(uuid())
  businessId        String
  country           String
  state             String
  city              String
  streetAddress     String
  specificLocation  String?   // Additional detail for specific location (e.g., suite number, building)

  business          Business  @relation(fields: [businessId], references: [id])

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model BusinessContact {
   id           String   @id @default(uuid())
   businessId   String   @unique
   phone        String?
   email        String?
   facebook     String?
   instagram    String?
   telegram     String?
   github       String?
   linkedIn     String?

   business     Business  @relation(fields: [businessId], references: [id])

   createdAt    DateTime @default(now())
   updatedAt    DateTime @default(now())
}


model Package {
   id                  String       @id @default(uuid())
   businessId          String
   packageType         PackageType
   startDate           DateTime
   endDate             DateTime
   expired             Boolean

   business            Business      @relation(fields: [businessId], references: [id])

   createdAt           DateTime     @default(now())
   updatedAt           DateTime     @default(now())
}

model Bill {
   id                  String       @id @default(uuid())
   businessId          String
   userId              String
   date                DateTime
   amount              Float
   paymentMethod       String
   reference           String

   business            Business      @relation(fields: [businessId], references: [id])
   user                User         @relation(fields: [userId], references: [id])

   createdAt           DateTime     @default(now())
   updatedAt           DateTime     @default(now())
}

model Review {
   id                  String       @id @default(uuid())
   userId              String
   businessId          String
   review              String

   user                User         @relation(fields: [userId], references: [id])
   business            Business      @relation(fields: [businessId], references: [id])

   createdAt           DateTime     @default(now())
   updatedAt           DateTime     @default(now())
}

model Rating {
   id                  String       @id @default(uuid())
   userId              String
   businessId          String
   rating              Int

   user                User         @relation(fields: [userId], references: [id])
   business            Business      @relation(fields: [businessId], references: [id])

   createdAt           DateTime     @default(now())
   updatedAt           DateTime     @default(now())
}

model Story {
   id                  String       @id @default(uuid())
   postDate            DateTime
   contentType         String
   text                String
   image               String?

   businessId          String
   business            Business      @relation(fields: [businessId], references: [id])

   createdAt           DateTime     @default(now())
   updatedAt           DateTime     @default(now())
}
