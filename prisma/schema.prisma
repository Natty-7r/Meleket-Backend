generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum PaymentMethod {
  CHAPA
}

enum BusinessStatus {
  CREATED // no buyed package
  ACTIVE
  INACTIVE
  HIDDEN // when package is done
}

enum UserType {
  CLIENT_USER
  ADMIN
  SUPER_ADMIN
}

enum OTPType {
  VERIFICATION
  RESET
}

enum Status {
  ACTIVE
  INACTIVE
  CREATED // in active b/c just created need to reset password
}


enum ChannelType {
  EMAIL
  PHONE
}

enum StoryContentType {
  STRING
  IMAGE
  BOTH
}

enum Sex {
  MALE
  FEMALE
}

enum LogType {
  USER_ACTIVITY
  ADMIN_ACTIVITY
  ERROR
  WARNING
  SYSTEM_ACTIVITY
}

model User {
  id                 String           @id @default(uuid())
  firstName          String
  lastName           String
  email              String           @unique
  phoneNumber        String?
  password           String
  profile            Profile?
  reviews            Review[]
  ratings            Rating[]
  bills              Bill[]
  businesses         Business[]       @relation("UserOwnsBusiness")
  followedBusinesses Business[]       @relation("UserFollowsBusiness")
  createdAt          DateTime         @default(now())
  passwordUpdatedAt  DateTime         @updatedAt
  status             Status           @default(CREATED)
  inActiveReason     String           @default("new account")
  roleId             String
  role               Role             @relation(name: "UserRoles", fields: [roleId], references: [id])

  // New relation to UserStoryView
  storyViews UserStoryView[]
}

model OTP {
  id           String      @id @default(uuid())
  userId       String
  code         String      @unique
  type         OTPType
  channelType  ChannelType
  channelValue String
  isVerified   Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Admin {
  id             String  @id @default(cuid())
  firstName      String
  lastName       String
  email          String  @unique
  password       String
  status         Status  @default(CREATED)
  inActiveReason String? @default("new account")
  roleId         String?
  createRoles    Role[]  @relation(name: "CreatedBy")
  role           Role?   @relation(name: "AdminRoles", fields: [roleId], references: [id])

  createdAat DateTime @default(now()) @map("created_at")
  updatedAat DateTime @updatedAt @map("updated_at")
}

model Profile {
  id               String   @id @default(uuid())
  age              Int?
  birthDate        DateTime
  sex              Sex
  profilePicture   String?
  country          String
  city             String
  streetAddress    String?
  specificLocation String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Category {
  id       String  @id @default(uuid())
  name     String  @db.VarChar(255)
  parentId String?
  level    Int
  price    Float // for day
  image    String
  verified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")
  business Business[]
}

model Business {
  id             String         @id @default(uuid())
  ownerId        String
  categoryId     String
  name           String
  description    String
  templateId     String
  mainImageUrl   String
  owner          User           @relation("UserOwnsBusiness", fields: [ownerId], references: [id]) // New relation
  visibility     BusinessStatus @default(CREATED)
  inActiveReason String?        @default("new account")

  services BussinessService[]
  address  BusinessAddress[]
  contact  BusinessContact?

  category      Category          @relation(fields: [categoryId], references: [id])
  followers     User[]            @relation("UserFollowsBusiness")
  packages      BusinessPackage[]
  reviews       Review[]
  ratings       Rating[]
  ratingSummary Json
  averageRating Float
  bills         Bill[]
  stories       Story[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model BussinessService {
  id             String  @id @default(uuid())
  businessId     String
  name           String
  description    String?
  image          String? // URL or path to the image
  specifications Json // JSON field for storing specifications

  business Business @relation(fields: [businessId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BusinessAddress {
  id               String  @id @default(uuid())
  businessId       String
  country          String
  state            String
  city             String
  streetAddress    String?
  specificLocation String? // Additional detail for specific location (e.g., suite number, building)

  business Business @relation(fields: [businessId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BusinessContact {
  id         String  @id @default(uuid())
  businessId String  @unique
  phone      String?
  email      String?
  facebook   String?
  instagram  String?
  telegram   String?
  github     String?
  linkedIn   String?

  business Business @relation(fields: [businessId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Review {
  id         String @id @default(uuid())
  userId     String
  businessId String
  review     String

  user     User     @relation(fields: [userId], references: [id])
  business Business @relation(fields: [businessId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Rating {
  id         String @id @default(uuid())
  userId     String
  businessId String
  rateValue  Int

  user     User     @relation(fields: [userId], references: [id])
  business Business @relation(fields: [businessId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Story {
  id          String           @id @default(uuid())
  contentType StoryContentType
  text        String?
  image       String?
  viewCount   Int              @default(0) // Total number of views

  businessId String
  business   Business @relation(fields: [businessId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // New relation to UserStoryView
  userViews UserStoryView[]
}

model UserStoryView {
  id       String   @id @default(uuid())
  userId   String
  storyId  String
  viewedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  story Story @relation(fields: [storyId], references: [id])

  @@unique([userId, storyId]) // Ensures that each user can view a story only once
}

model Package {
  id               String            @id @default(uuid())
  name             String
  code             String
  price            Float // amount in birr 
  monthCount       Int // number of months the package used for 
  description      String?
  businessPackages BusinessPackage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model BusinessPackage {
  id         String @id @default(uuid())
  businessId String

  startDate DateTime @default(now())
  expreDate DateTime
  expired   Boolean  @default(false)
  billed    Boolean  @default(false)
  reference String // reference 

  bill      Bill?   @relation(fields: [billId], references: [id])
  billId    String? @unique // Ensure that each Package has only one Bill
  packageId String
  package   Package @relation(fields: [packageId], references: [id])

  business Business @relation(fields: [businessId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Bill {
  id         String @id @default(uuid())
  businessId String
  userId     String
  amount     Float

  reference     String
  package       BusinessPackage?
  paymentMethod PaymentMethod

  business Business @relation(fields: [businessId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// log related 

model Log {
  id         String    @id @default(uuid())
  logType    LogType
  message    String
  context    String?
  archived   Boolean   @default(false)
  timestamp  DateTime  @default(now())
  archivedAt DateTime?
  userId     String?
  adminId    String?
}

// Role-Based Access Control (RBAC) Schema
enum RoleType {
  CLIENT
  ADMIN
}

// Enum to define possible actions for permissions
enum PermissionType {
  READ
  DELETE
  UPDATE
  CREATE
}

enum ModuleName {
  ROLE
  PERMISSION
  APPLICANT
  ADMIN
  USER
  PROFILE
  BUSINESS
  BUSINESS_SERVICE
  BUSINESS_ADDRESS
  BUSINESS_CONTACT
  CATEGORY
  BILL
  PACKAGE
  BUSINESS_PACKAGE
  STORY
  STORY_VIEW
  REVIEW
  RATING
  OTP
  LOG
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  roleType  RoleType
  creatorId String?

  permissions Permission[]
  admins      Admin[]      @relation(name: "AdminRoles")
  users       User[]       @relation(name: "UserRoles")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  deletedAt   DateTime?

  createdBy Admin? @relation(name: "CreatedBy", fields: [creatorId], references: [id])

  @@map("roles")
}

model Permission {
  id               String         @id @default(uuid())
  moduleName       ModuleName
  permissionName   PermissionType
  permissionWeight Int            @default(0)

  Roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([moduleName, permissionName])
  @@map("permissions")
}
